import copy
import random

# Hat class definition
class Hat:
    def __init__(self, **kwargs):
        self.contents = []
        for color, count in kwargs.items():
            self.contents.extend([color] * count)

    def draw(self, num_of_balls):
        # If num_of_balls exceeds the number of balls in the hat, return all balls
        if num_of_balls >= len(self.contents):
            drawn_balls = self.contents.copy()
            self.contents.clear()  # Empty the hat after drawing
            return drawn_balls
        
        # Otherwise, draw the specified number of balls and remove them from the hat
        drawn_balls = random.sample(self.contents, k=num_of_balls)
        for ball in drawn_balls:
            self.contents.remove(ball)
        
        return drawn_balls

# Experiment function definition
def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    successful_experiments = 0 

    for _ in range(num_experiments):
        # Deep copy the hat to preserve the original
        trial_hat = copy.deepcopy(hat)
        
        # Drawing the balls
        drawn_balls = trial_hat.draw(num_balls_drawn) 

        # Check if the drawn balls meet the expected criteria
        success = True
        for color, count in expected_balls.items():
            if drawn_balls.count(color) < count:
                success = False
                break

        if success:
            successful_experiments += 1

    # Probability is the ratio of successful experiments to the total number of experiments
    probability = successful_experiments / num_experiments
    return probability
